/* tslint:disable */
/* eslint-disable */
/**
 * LunarCrush API v4 overview
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  PublicCategoryCategoryPostsV1Get200Response,
  PublicCategoryCategoryTimeSeriesV1Get200Response,
  PublicCoinsCoinTimeSeriesV2Get200Response,
  PublicCoinsCoinV1Get200Response,
  PublicCoinsListV2Get200Response,
  PublicCreatorNetworkIdPostsV1Get200Response,
  PublicPostsPostTypePostIdTimeSeriesV1Get200Response,
  PublicPostsPostTypePostIdV1Get200Response,
  PublicTopicsListV1Get200Response,
} from '../models/index'
import {
  PublicCategoryCategoryPostsV1Get200ResponseFromJSON,
  PublicCategoryCategoryPostsV1Get200ResponseToJSON,
  PublicCategoryCategoryTimeSeriesV1Get200ResponseFromJSON,
  PublicCategoryCategoryTimeSeriesV1Get200ResponseToJSON,
  PublicCoinsCoinTimeSeriesV2Get200ResponseFromJSON,
  PublicCoinsCoinTimeSeriesV2Get200ResponseToJSON,
  PublicCoinsCoinV1Get200ResponseFromJSON,
  PublicCoinsCoinV1Get200ResponseToJSON,
  PublicCoinsListV2Get200ResponseFromJSON,
  PublicCoinsListV2Get200ResponseToJSON,
  PublicCreatorNetworkIdPostsV1Get200ResponseFromJSON,
  PublicCreatorNetworkIdPostsV1Get200ResponseToJSON,
  PublicPostsPostTypePostIdTimeSeriesV1Get200ResponseFromJSON,
  PublicPostsPostTypePostIdTimeSeriesV1Get200ResponseToJSON,
  PublicPostsPostTypePostIdV1Get200ResponseFromJSON,
  PublicPostsPostTypePostIdV1Get200ResponseToJSON,
  PublicTopicsListV1Get200ResponseFromJSON,
  PublicTopicsListV1Get200ResponseToJSON,
} from '../models/index'

export interface PublicCategoryCategoryCreatorsV1GetRequest {
  category: string
}

export interface PublicCategoryCategoryNewsV1GetRequest {
  category: string
}

export interface PublicCategoryCategoryPostsV1GetRequest {
  category: string
  start?: string
  end?: string
}

export interface PublicCategoryCategoryTimeSeriesV1GetRequest {
  category: string
  bucket?: string
  interval?: string
  start?: string
  end?: string
}

export interface PublicCategoryCategoryTopicsV1GetRequest {
  category: string
}

export interface PublicCategoryCategoryV1GetRequest {
  category: string
}

export interface PublicCoinsCoinMetaV1GetRequest {
  coin: string
}

export interface PublicCoinsCoinTimeSeriesV1GetRequest {
  coin: string
}

export interface PublicCoinsCoinTimeSeriesV2GetRequest {
  coin: string
  bucket?: string
  interval?: string
  start?: string
  end?: string
}

export interface PublicCoinsCoinV1GetRequest {
  coin: string
}

export interface PublicCoinsListV2GetRequest {
  sort?: string
  limit?: number
  desc?: boolean
  page?: any
}

export interface PublicCreatorNetworkIdPostsV1GetRequest {
  network: string
  id: string
  start?: string
  end?: string
}

export interface PublicCreatorNetworkIdTimeSeriesV1GetRequest {
  network: string
  id: string
  bucket?: string
  interval?: string
  start?: string
  end?: string
}

export interface PublicCreatorNetworkIdV1GetRequest {
  network: string
  id: string
}

export interface PublicNftsListV2GetRequest {
  sort?: string
  limit?: number
  desc?: boolean
  page?: any
}

export interface PublicNftsNftTimeSeriesV1GetRequest {
  nft: string
}

export interface PublicNftsNftTimeSeriesV2GetRequest {
  nft: string
  bucket?: string
  interval?: string
  start?: string
  end?: string
}

export interface PublicNftsNftV1GetRequest {
  nft: string
}

export interface PublicPostsPostTypePostIdTimeSeriesV1GetRequest {
  postType: string
  postId: string
}

export interface PublicPostsPostTypePostIdV1GetRequest {
  postType: string
  postId: string
}

export interface PublicSearchesCreateGetRequest {
  name: string
  searchJson: string
  priority?: boolean
}

export interface PublicSearchesSearchGetRequest {
  term?: string
  searchJson?: string
}

export interface PublicSearchesSlugDeleteGetRequest {
  slug: string
}

export interface PublicSearchesSlugGetRequest {
  slug: string
}

export interface PublicSearchesSlugUpdateGetRequest {
  slug: string
  name?: string
  priority?: boolean
}

export interface PublicStocksListV2GetRequest {
  sort?: string
  limit?: number
  desc?: boolean
  page?: any
}

export interface PublicStocksStockTimeSeriesV1GetRequest {
  stock: string
}

export interface PublicStocksStockTimeSeriesV2GetRequest {
  stock: string
  bucket?: string
  interval?: string
  start?: string
  end?: string
}

export interface PublicStocksStockV1GetRequest {
  stock: string
}

export interface PublicTopicTopicCreatorsV1GetRequest {
  topic: string
}

export interface PublicTopicTopicNewsV1GetRequest {
  topic: string
}

export interface PublicTopicTopicPostsV1GetRequest {
  topic: string
  start?: string
  end?: string
}

export interface PublicTopicTopicTimeSeriesV1GetRequest {
  topic: string
  bucket?: string
  interval?: string
  start?: string
  end?: string
}

export interface PublicTopicTopicV1GetRequest {
  topic: string
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Get a list of trending social categories.
   */
  async publicCategoriesListV1GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/categories/list/v1`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get a list of trending social categories.
   */
  async publicCategoriesListV1Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCategoriesListV1GetRaw(initOverrides)
  }

  /**
   * Get the top creators for a social category
   */
  async publicCategoryCategoryCreatorsV1GetRaw(
    requestParameters: PublicCategoryCategoryCreatorsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling publicCategoryCategoryCreatorsV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/category/{category}/creators/v1`.replace(
          `{${'category'}}`,
          encodeURIComponent(String(requestParameters['category']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get the top creators for a social category
   */
  async publicCategoryCategoryCreatorsV1Get(
    requestParameters: PublicCategoryCategoryCreatorsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCategoryCategoryCreatorsV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get the top news posts for a category. Top news is determined by the metrics related to the social posts that mention the news posts.
   */
  async publicCategoryCategoryNewsV1GetRaw(
    requestParameters: PublicCategoryCategoryNewsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling publicCategoryCategoryNewsV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/category/{category}/news/v1`.replace(
          `{${'category'}}`,
          encodeURIComponent(String(requestParameters['category']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get the top news posts for a category. Top news is determined by the metrics related to the social posts that mention the news posts.
   */
  async publicCategoryCategoryNewsV1Get(
    requestParameters: PublicCategoryCategoryNewsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCategoryCategoryNewsV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get the top posts for a social topic. If start time is provided the result will be the top posts by interactions for the time range. If start is not provided it will be the most recent top posts by interactions from the last 24 hours.
   */
  async publicCategoryCategoryPostsV1GetRaw(
    requestParameters: PublicCategoryCategoryPostsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicCategoryCategoryPostsV1Get200Response>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling publicCategoryCategoryPostsV1Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/category/{category}/posts/v1`.replace(
          `{${'category'}}`,
          encodeURIComponent(String(requestParameters['category']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicCategoryCategoryPostsV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get the top posts for a social topic. If start time is provided the result will be the top posts by interactions for the time range. If start is not provided it will be the most recent top posts by interactions from the last 24 hours.
   */
  async publicCategoryCategoryPostsV1Get(
    requestParameters: PublicCategoryCategoryPostsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicCategoryCategoryPostsV1Get200Response> {
    const response = await this.publicCategoryCategoryPostsV1GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get historical time series data for a social category
   */
  async publicCategoryCategoryTimeSeriesV1GetRaw(
    requestParameters: PublicCategoryCategoryTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<PublicCategoryCategoryTimeSeriesV1Get200Response>
  > {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling publicCategoryCategoryTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket']
    }

    if (requestParameters['interval'] != null) {
      queryParameters['interval'] = requestParameters['interval']
    }

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/category/{category}/time-series/v1`.replace(
          `{${'category'}}`,
          encodeURIComponent(String(requestParameters['category']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicCategoryCategoryTimeSeriesV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get historical time series data for a social category
   */
  async publicCategoryCategoryTimeSeriesV1Get(
    requestParameters: PublicCategoryCategoryTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicCategoryCategoryTimeSeriesV1Get200Response> {
    const response = await this.publicCategoryCategoryTimeSeriesV1GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get the top topics for a social category
   */
  async publicCategoryCategoryTopicsV1GetRaw(
    requestParameters: PublicCategoryCategoryTopicsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling publicCategoryCategoryTopicsV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/category/{category}/topics/v1`.replace(
          `{${'category'}}`,
          encodeURIComponent(String(requestParameters['category']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get the top topics for a social category
   */
  async publicCategoryCategoryTopicsV1Get(
    requestParameters: PublicCategoryCategoryTopicsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCategoryCategoryTopicsV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get summary information for a social topic
   */
  async publicCategoryCategoryV1GetRaw(
    requestParameters: PublicCategoryCategoryV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['category'] == null) {
      throw new runtime.RequiredError(
        'category',
        'Required parameter "category" was null or undefined when calling publicCategoryCategoryV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/category/{category}/v1`.replace(
          `{${'category'}}`,
          encodeURIComponent(String(requestParameters['category']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get summary information for a social topic
   */
  async publicCategoryCategoryV1Get(
    requestParameters: PublicCategoryCategoryV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCategoryCategoryV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get meta information for a cryptocurrency project. This includes information such as the website, social media links, and other information.
   */
  async publicCoinsCoinMetaV1GetRaw(
    requestParameters: PublicCoinsCoinMetaV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['coin'] == null) {
      throw new runtime.RequiredError(
        'coin',
        'Required parameter "coin" was null or undefined when calling publicCoinsCoinMetaV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/coins/{coin}/meta/v1`.replace(
          `{${'coin'}}`,
          encodeURIComponent(String(requestParameters['coin']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get meta information for a cryptocurrency project. This includes information such as the website, social media links, and other information.
   */
  async publicCoinsCoinMetaV1Get(
    requestParameters: PublicCoinsCoinMetaV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCoinsCoinMetaV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get market time series data on a coin or token. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicCoinsCoinTimeSeriesV1GetRaw(
    requestParameters: PublicCoinsCoinTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['coin'] == null) {
      throw new runtime.RequiredError(
        'coin',
        'Required parameter "coin" was null or undefined when calling publicCoinsCoinTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/coins/{coin}/time-series/v1`.replace(
          `{${'coin'}}`,
          encodeURIComponent(String(requestParameters['coin']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market time series data on a coin or token. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicCoinsCoinTimeSeriesV1Get(
    requestParameters: PublicCoinsCoinTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCoinsCoinTimeSeriesV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get market time series data on a coin or token. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicCoinsCoinTimeSeriesV2GetRaw(
    requestParameters: PublicCoinsCoinTimeSeriesV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicCoinsCoinTimeSeriesV2Get200Response>> {
    if (requestParameters['coin'] == null) {
      throw new runtime.RequiredError(
        'coin',
        'Required parameter "coin" was null or undefined when calling publicCoinsCoinTimeSeriesV2Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket']
    }

    if (requestParameters['interval'] != null) {
      queryParameters['interval'] = requestParameters['interval']
    }

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/coins/{coin}/time-series/v2`.replace(
          `{${'coin'}}`,
          encodeURIComponent(String(requestParameters['coin']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicCoinsCoinTimeSeriesV2Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get market time series data on a coin or token. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicCoinsCoinTimeSeriesV2Get(
    requestParameters: PublicCoinsCoinTimeSeriesV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicCoinsCoinTimeSeriesV2Get200Response> {
    const response = await this.publicCoinsCoinTimeSeriesV2GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get market data on a coin or token. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicCoinsCoinV1GetRaw(
    requestParameters: PublicCoinsCoinV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicCoinsCoinV1Get200Response>> {
    if (requestParameters['coin'] == null) {
      throw new runtime.RequiredError(
        'coin',
        'Required parameter "coin" was null or undefined when calling publicCoinsCoinV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/coins/{coin}/v1`.replace(
          `{${'coin'}}`,
          encodeURIComponent(String(requestParameters['coin']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicCoinsCoinV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get market data on a coin or token. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicCoinsCoinV1Get(
    requestParameters: PublicCoinsCoinV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicCoinsCoinV1Get200Response> {
    const response = await this.publicCoinsCoinV1GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Lists all coins and tokens supported by LunarCrush. Includes the \"topic\" endpoint to use to get social data from this asset as a social topic.
   */
  async publicCoinsListV1GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/coins/list/v1`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Lists all coins and tokens supported by LunarCrush. Includes the \"topic\" endpoint to use to get social data from this asset as a social topic.
   */
  async publicCoinsListV1Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCoinsListV1GetRaw(initOverrides)
  }

  /**
   * Get a general snapshot of LunarCrush metrics on the entire list of tracked coins. It is designed as a lightweight mechanism for monitoring the universe of available assets, either in aggregate or relative to each other. Metrics include Galaxy Score™, AltRank™, price, volatility, 24h percent change, market cap, social mentions, social interactions, social contributors, social dominance, and categories.
   */
  async publicCoinsListV2GetRaw(
    requestParameters: PublicCoinsListV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicCoinsListV2Get200Response>> {
    const queryParameters: any = {}

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    if (requestParameters['desc'] != null) {
      queryParameters['desc'] = requestParameters['desc']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/coins/list/v2`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicCoinsListV2Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get a general snapshot of LunarCrush metrics on the entire list of tracked coins. It is designed as a lightweight mechanism for monitoring the universe of available assets, either in aggregate or relative to each other. Metrics include Galaxy Score™, AltRank™, price, volatility, 24h percent change, market cap, social mentions, social interactions, social contributors, social dominance, and categories.
   */
  async publicCoinsListV2Get(
    requestParameters: PublicCoinsListV2GetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicCoinsListV2Get200Response> {
    const response = await this.publicCoinsListV2GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get the top posts for a specific creator.
   */
  async publicCreatorNetworkIdPostsV1GetRaw(
    requestParameters: PublicCreatorNetworkIdPostsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicCreatorNetworkIdPostsV1Get200Response>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling publicCreatorNetworkIdPostsV1Get().'
      )
    }

    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling publicCreatorNetworkIdPostsV1Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/creator/{network}/{id}/posts/v1`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters['id']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicCreatorNetworkIdPostsV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get the top posts for a specific creator.
   */
  async publicCreatorNetworkIdPostsV1Get(
    requestParameters: PublicCreatorNetworkIdPostsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicCreatorNetworkIdPostsV1Get200Response> {
    const response = await this.publicCreatorNetworkIdPostsV1GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get time series data on a creator.
   */
  async publicCreatorNetworkIdTimeSeriesV1GetRaw(
    requestParameters: PublicCreatorNetworkIdTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling publicCreatorNetworkIdTimeSeriesV1Get().'
      )
    }

    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling publicCreatorNetworkIdTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket']
    }

    if (requestParameters['interval'] != null) {
      queryParameters['interval'] = requestParameters['interval']
    }

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/creator/{network}/{id}/time-series/v1`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters['id']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get time series data on a creator.
   */
  async publicCreatorNetworkIdTimeSeriesV1Get(
    requestParameters: PublicCreatorNetworkIdTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCreatorNetworkIdTimeSeriesV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get detail information on a specific creator
   */
  async publicCreatorNetworkIdV1GetRaw(
    requestParameters: PublicCreatorNetworkIdV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['network'] == null) {
      throw new runtime.RequiredError(
        'network',
        'Required parameter "network" was null or undefined when calling publicCreatorNetworkIdV1Get().'
      )
    }

    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling publicCreatorNetworkIdV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/creator/{network}/{id}/v1`
          .replace(
            `{${'network'}}`,
            encodeURIComponent(String(requestParameters['network']))
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters['id']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get detail information on a specific creator
   */
  async publicCreatorNetworkIdV1Get(
    requestParameters: PublicCreatorNetworkIdV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCreatorNetworkIdV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get a list of trending social creators over all of social based on interactions. To get lists of creators by category or topic see the topics and categories endpoints.
   */
  async publicCreatorsListV1GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/creators/list/v1`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get a list of trending social creators over all of social based on interactions. To get lists of creators by category or topic see the topics and categories endpoints.
   */
  async publicCreatorsListV1Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicCreatorsListV1GetRaw(initOverrides)
  }

  /**
   * Lists all nft collections supported by LunarCrush. Includes the \"topic\" endpoint to use to get social data from this nft collection as a social topic.
   */
  async publicNftsListV1GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/nfts/list/v1`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Lists all nft collections supported by LunarCrush. Includes the \"topic\" endpoint to use to get social data from this nft collection as a social topic.
   */
  async publicNftsListV1Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicNftsListV1GetRaw(initOverrides)
  }

  /**
   * Get a general snapshot of LunarCrush metrics on the entire list of tracked NFTS. It is designed as a lightweight mechanism for monitoring the universe of available assets, either in aggregate or relative to each other. Metrics include Galaxy Score™, AltRank™, floor price, 24h percent change, market cap, social mentions, social interactions, social contributors, social dominance, and categories.
   */
  async publicNftsListV2GetRaw(
    requestParameters: PublicNftsListV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    if (requestParameters['desc'] != null) {
      queryParameters['desc'] = requestParameters['desc']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/nfts/list/v2`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get a general snapshot of LunarCrush metrics on the entire list of tracked NFTS. It is designed as a lightweight mechanism for monitoring the universe of available assets, either in aggregate or relative to each other. Metrics include Galaxy Score™, AltRank™, floor price, 24h percent change, market cap, social mentions, social interactions, social contributors, social dominance, and categories.
   */
  async publicNftsListV2Get(
    requestParameters: PublicNftsListV2GetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicNftsListV2GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get market time series data on an nft collection. Specify the nft to be queried by providing the numeric ID or slug of the nft collection in the input parameter, which can be found by calling the /public/nfts/list endpoint.
   */
  async publicNftsNftTimeSeriesV1GetRaw(
    requestParameters: PublicNftsNftTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['nft'] == null) {
      throw new runtime.RequiredError(
        'nft',
        'Required parameter "nft" was null or undefined when calling publicNftsNftTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/nfts/{nft}/time-series/v1`.replace(
          `{${'nft'}}`,
          encodeURIComponent(String(requestParameters['nft']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market time series data on an nft collection. Specify the nft to be queried by providing the numeric ID or slug of the nft collection in the input parameter, which can be found by calling the /public/nfts/list endpoint.
   */
  async publicNftsNftTimeSeriesV1Get(
    requestParameters: PublicNftsNftTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicNftsNftTimeSeriesV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get market time series data on a nft. Specify the nft to be queried by providing the numeric ID or the symbol of the nft in the input parameter, which can be found by calling the /nfts/list endpoint.
   */
  async publicNftsNftTimeSeriesV2GetRaw(
    requestParameters: PublicNftsNftTimeSeriesV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['nft'] == null) {
      throw new runtime.RequiredError(
        'nft',
        'Required parameter "nft" was null or undefined when calling publicNftsNftTimeSeriesV2Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket']
    }

    if (requestParameters['interval'] != null) {
      queryParameters['interval'] = requestParameters['interval']
    }

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/nfts/{nft}/time-series/v2`.replace(
          `{${'nft'}}`,
          encodeURIComponent(String(requestParameters['nft']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market time series data on a nft. Specify the nft to be queried by providing the numeric ID or the symbol of the nft in the input parameter, which can be found by calling the /nfts/list endpoint.
   */
  async publicNftsNftTimeSeriesV2Get(
    requestParameters: PublicNftsNftTimeSeriesV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicNftsNftTimeSeriesV2GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get market data on an nft collection. Specify the nft to be queried by providing the numeric ID or the slug of the nft in the input parameter, which can be found by calling the /public/nfts/list endpoint.
   */
  async publicNftsNftV1GetRaw(
    requestParameters: PublicNftsNftV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['nft'] == null) {
      throw new runtime.RequiredError(
        'nft',
        'Required parameter "nft" was null or undefined when calling publicNftsNftV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/nfts/{nft}/v1`.replace(
          `{${'nft'}}`,
          encodeURIComponent(String(requestParameters['nft']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market data on an nft collection. Specify the nft to be queried by providing the numeric ID or the slug of the nft in the input parameter, which can be found by calling the /public/nfts/list endpoint.
   */
  async publicNftsNftV1Get(
    requestParameters: PublicNftsNftV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicNftsNftV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get interactions over time for a post. If a post is older than 365 days the time series will be returned as daily interactions, otherwise it hourly interactions
   */
  async publicPostsPostTypePostIdTimeSeriesV1GetRaw(
    requestParameters: PublicPostsPostTypePostIdTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<PublicPostsPostTypePostIdTimeSeriesV1Get200Response>
  > {
    if (requestParameters['postType'] == null) {
      throw new runtime.RequiredError(
        'postType',
        'Required parameter "postType" was null or undefined when calling publicPostsPostTypePostIdTimeSeriesV1Get().'
      )
    }

    if (requestParameters['postId'] == null) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter "postId" was null or undefined when calling publicPostsPostTypePostIdTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/posts/{post_type}/{post_id}/time-series/v1`
          .replace(
            `{${'post_type'}}`,
            encodeURIComponent(String(requestParameters['postType']))
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters['postId']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicPostsPostTypePostIdTimeSeriesV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get interactions over time for a post. If a post is older than 365 days the time series will be returned as daily interactions, otherwise it hourly interactions
   */
  async publicPostsPostTypePostIdTimeSeriesV1Get(
    requestParameters: PublicPostsPostTypePostIdTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicPostsPostTypePostIdTimeSeriesV1Get200Response> {
    const response = await this.publicPostsPostTypePostIdTimeSeriesV1GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get details of a post
   */
  async publicPostsPostTypePostIdV1GetRaw(
    requestParameters: PublicPostsPostTypePostIdV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicPostsPostTypePostIdV1Get200Response>> {
    if (requestParameters['postType'] == null) {
      throw new runtime.RequiredError(
        'postType',
        'Required parameter "postType" was null or undefined when calling publicPostsPostTypePostIdV1Get().'
      )
    }

    if (requestParameters['postId'] == null) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter "postId" was null or undefined when calling publicPostsPostTypePostIdV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/posts/{post_type}/{post_id}/v1`
          .replace(
            `{${'post_type'}}`,
            encodeURIComponent(String(requestParameters['postType']))
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters['postId']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicPostsPostTypePostIdV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get details of a post
   */
  async publicPostsPostTypePostIdV1Get(
    requestParameters: PublicPostsPostTypePostIdV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicPostsPostTypePostIdV1Get200Response> {
    const response = await this.publicPostsPostTypePostIdV1GetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a custom search aggregation of topics and search terms. Fine tune the posts that get included or excluded. Search terms and configuration cannot be changed once created. If successful returns the new id/slug and the processed search config. Note that search terms will be adjusted and simplified for optimized search and matching.
   */
  async publicSearchesCreateGetRaw(
    requestParameters: PublicSearchesCreateGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['name'] == null) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter "name" was null or undefined when calling publicSearchesCreateGet().'
      )
    }

    if (requestParameters['searchJson'] == null) {
      throw new runtime.RequiredError(
        'searchJson',
        'Required parameter "searchJson" was null or undefined when calling publicSearchesCreateGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['name'] != null) {
      queryParameters['name'] = requestParameters['name']
    }

    if (requestParameters['searchJson'] != null) {
      queryParameters['search_json'] = requestParameters['searchJson']
    }

    if (requestParameters['priority'] != null) {
      queryParameters['priority'] = requestParameters['priority']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/searches/create`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Create a custom search aggregation of topics and search terms. Fine tune the posts that get included or excluded. Search terms and configuration cannot be changed once created. If successful returns the new id/slug and the processed search config. Note that search terms will be adjusted and simplified for optimized search and matching.
   */
  async publicSearchesCreateGet(
    requestParameters: PublicSearchesCreateGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSearchesCreateGetRaw(requestParameters, initOverrides)
  }

  /**
   * List all custom search aggregations.
   */
  async publicSearchesListGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/searches/list`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * List all custom search aggregations.
   */
  async publicSearchesListGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSearchesListGetRaw(initOverrides)
  }

  /**
   * Get recently popular social posts matching a single search term or phrase. Optionally configure and test a custom search configuration.
   */
  async publicSearchesSearchGetRaw(
    requestParameters: PublicSearchesSearchGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    if (requestParameters['term'] != null) {
      queryParameters['term'] = requestParameters['term']
    }

    if (requestParameters['searchJson'] != null) {
      queryParameters['search_json'] = requestParameters['searchJson']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/searches/search`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get recently popular social posts matching a single search term or phrase. Optionally configure and test a custom search configuration.
   */
  async publicSearchesSearchGet(
    requestParameters: PublicSearchesSearchGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSearchesSearchGetRaw(requestParameters, initOverrides)
  }

  /**
   * Delete a custom search aggregations.
   */
  async publicSearchesSlugDeleteGetRaw(
    requestParameters: PublicSearchesSlugDeleteGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling publicSearchesSlugDeleteGet().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/searches/{slug}/delete`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a custom search aggregations.
   */
  async publicSearchesSlugDeleteGet(
    requestParameters: PublicSearchesSlugDeleteGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSearchesSlugDeleteGetRaw(requestParameters, initOverrides)
  }

  /**
   * See the summary output of a custom search aggregation.
   */
  async publicSearchesSlugGetRaw(
    requestParameters: PublicSearchesSlugGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling publicSearchesSlugGet().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/searches/{slug}`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * See the summary output of a custom search aggregation.
   */
  async publicSearchesSlugGet(
    requestParameters: PublicSearchesSlugGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSearchesSlugGetRaw(requestParameters, initOverrides)
  }

  /**
   * Update a custom search aggregation name or priority. Search terms and configuration cannot be changed once created.
   */
  async publicSearchesSlugUpdateGetRaw(
    requestParameters: PublicSearchesSlugUpdateGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling publicSearchesSlugUpdateGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['name'] != null) {
      queryParameters['name'] = requestParameters['name']
    }

    if (requestParameters['priority'] != null) {
      queryParameters['priority'] = requestParameters['priority']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/searches/{slug}/update`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Update a custom search aggregation name or priority. Search terms and configuration cannot be changed once created.
   */
  async publicSearchesSlugUpdateGet(
    requestParameters: PublicSearchesSlugUpdateGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSearchesSlugUpdateGetRaw(requestParameters, initOverrides)
  }

  /**
   * Lists all stocks supported by LunarCrush. Includes the \"topic\" endpoint to use to get social data from this asset as a social topic.
   */
  async publicStocksListV1GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/stocks/list/v1`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Lists all stocks supported by LunarCrush. Includes the \"topic\" endpoint to use to get social data from this asset as a social topic.
   */
  async publicStocksListV1Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicStocksListV1GetRaw(initOverrides)
  }

  /**
   * Get a general snapshot of LunarCrush metrics on the entire list of tracked stocks. It is designed as a lightweight mechanism for monitoring the universe of available assets, either in aggregate or relative to each other. Metrics include Galaxy Score™, AltRank™, floor price, 24h percent change, market cap, social mentions, social interactions, social contributors, social dominance, and categories.
   */
  async publicStocksListV2GetRaw(
    requestParameters: PublicStocksListV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    if (requestParameters['desc'] != null) {
      queryParameters['desc'] = requestParameters['desc']
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/stocks/list/v2`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get a general snapshot of LunarCrush metrics on the entire list of tracked stocks. It is designed as a lightweight mechanism for monitoring the universe of available assets, either in aggregate or relative to each other. Metrics include Galaxy Score™, AltRank™, floor price, 24h percent change, market cap, social mentions, social interactions, social contributors, social dominance, and categories.
   */
  async publicStocksListV2Get(
    requestParameters: PublicStocksListV2GetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicStocksListV2GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get market time series data on a stock. Specify the stock to be queried by providing the numeric ID or the symbol of the stock in the input parameter, which can be found by calling the /stocks/list endpoint.
   */
  async publicStocksStockTimeSeriesV1GetRaw(
    requestParameters: PublicStocksStockTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['stock'] == null) {
      throw new runtime.RequiredError(
        'stock',
        'Required parameter "stock" was null or undefined when calling publicStocksStockTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/stocks/{stock}/time-series/v1`.replace(
          `{${'stock'}}`,
          encodeURIComponent(String(requestParameters['stock']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market time series data on a stock. Specify the stock to be queried by providing the numeric ID or the symbol of the stock in the input parameter, which can be found by calling the /stocks/list endpoint.
   */
  async publicStocksStockTimeSeriesV1Get(
    requestParameters: PublicStocksStockTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicStocksStockTimeSeriesV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get market time series data on a stock. Specify the stock to be queried by providing the numeric ID or the symbol of the stock in the input parameter, which can be found by calling the /stocks/list endpoint.
   */
  async publicStocksStockTimeSeriesV2GetRaw(
    requestParameters: PublicStocksStockTimeSeriesV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['stock'] == null) {
      throw new runtime.RequiredError(
        'stock',
        'Required parameter "stock" was null or undefined when calling publicStocksStockTimeSeriesV2Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket']
    }

    if (requestParameters['interval'] != null) {
      queryParameters['interval'] = requestParameters['interval']
    }

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/stocks/{stock}/time-series/v2`.replace(
          `{${'stock'}}`,
          encodeURIComponent(String(requestParameters['stock']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market time series data on a stock. Specify the stock to be queried by providing the numeric ID or the symbol of the stock in the input parameter, which can be found by calling the /stocks/list endpoint.
   */
  async publicStocksStockTimeSeriesV2Get(
    requestParameters: PublicStocksStockTimeSeriesV2GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicStocksStockTimeSeriesV2GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get market data on a stock. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicStocksStockV1GetRaw(
    requestParameters: PublicStocksStockV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['stock'] == null) {
      throw new runtime.RequiredError(
        'stock',
        'Required parameter "stock" was null or undefined when calling publicStocksStockV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/stocks/{stock}/v1`.replace(
          `{${'stock'}}`,
          encodeURIComponent(String(requestParameters['stock']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get market data on a stock. Specify the coin to be queried by providing the numeric ID or the symbol of the coin in the input parameter, which can be found by calling the /coins/list endpoint.
   */
  async publicStocksStockV1Get(
    requestParameters: PublicStocksStockV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicStocksStockV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Updates to potential changes to historical time series data. Search term changes only impact the most recent 72 hours (hourly) or 3 days (daily) data. \"full historical\" is a change that may impact the full history of data. Each change provides a description of what is impacted and why.
   */
  async publicSystemChangesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/system/changes`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Updates to potential changes to historical time series data. Search term changes only impact the most recent 72 hours (hourly) or 3 days (daily) data. \"full historical\" is a change that may impact the full history of data. Each change provides a description of what is impacted and why.
   */
  async publicSystemChangesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicSystemChangesGetRaw(initOverrides)
  }

  /**
   * Get the top creators for a social topic
   */
  async publicTopicTopicCreatorsV1GetRaw(
    requestParameters: PublicTopicTopicCreatorsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['topic'] == null) {
      throw new runtime.RequiredError(
        'topic',
        'Required parameter "topic" was null or undefined when calling publicTopicTopicCreatorsV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/topic/{topic}/creators/v1`.replace(
          `{${'topic'}}`,
          encodeURIComponent(String(requestParameters['topic']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get the top creators for a social topic
   */
  async publicTopicTopicCreatorsV1Get(
    requestParameters: PublicTopicTopicCreatorsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicTopicTopicCreatorsV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get the top news posts for a social topic. Top news is determined by the metrics related to the social posts that mention the news posts.
   */
  async publicTopicTopicNewsV1GetRaw(
    requestParameters: PublicTopicTopicNewsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['topic'] == null) {
      throw new runtime.RequiredError(
        'topic',
        'Required parameter "topic" was null or undefined when calling publicTopicTopicNewsV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/topic/{topic}/news/v1`.replace(
          `{${'topic'}}`,
          encodeURIComponent(String(requestParameters['topic']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get the top news posts for a social topic. Top news is determined by the metrics related to the social posts that mention the news posts.
   */
  async publicTopicTopicNewsV1Get(
    requestParameters: PublicTopicTopicNewsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicTopicTopicNewsV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get the top posts for a social topic. If start time is provided the result will be the top posts by interactions for the time range. If start is not provided it will be the most recent top posts by interactions from the last 24 hours.
   */
  async publicTopicTopicPostsV1GetRaw(
    requestParameters: PublicTopicTopicPostsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['topic'] == null) {
      throw new runtime.RequiredError(
        'topic',
        'Required parameter "topic" was null or undefined when calling publicTopicTopicPostsV1Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/topic/{topic}/posts/v1`.replace(
          `{${'topic'}}`,
          encodeURIComponent(String(requestParameters['topic']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get the top posts for a social topic. If start time is provided the result will be the top posts by interactions for the time range. If start is not provided it will be the most recent top posts by interactions from the last 24 hours.
   */
  async publicTopicTopicPostsV1Get(
    requestParameters: PublicTopicTopicPostsV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicTopicTopicPostsV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get historical time series data for a social topic
   */
  async publicTopicTopicTimeSeriesV1GetRaw(
    requestParameters: PublicTopicTopicTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['topic'] == null) {
      throw new runtime.RequiredError(
        'topic',
        'Required parameter "topic" was null or undefined when calling publicTopicTopicTimeSeriesV1Get().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket']
    }

    if (requestParameters['interval'] != null) {
      queryParameters['interval'] = requestParameters['interval']
    }

    if (requestParameters['start'] != null) {
      queryParameters['start'] = requestParameters['start']
    }

    if (requestParameters['end'] != null) {
      queryParameters['end'] = requestParameters['end']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/topic/{topic}/time-series/v1`.replace(
          `{${'topic'}}`,
          encodeURIComponent(String(requestParameters['topic']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get historical time series data for a social topic
   */
  async publicTopicTopicTimeSeriesV1Get(
    requestParameters: PublicTopicTopicTimeSeriesV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicTopicTopicTimeSeriesV1GetRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * Get summary information for a social topic. The output is a 24 hour aggregation social activity with metrics comparing the latest 24 hours to the previous 24 hours.
   */
  async publicTopicTopicV1GetRaw(
    requestParameters: PublicTopicTopicV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['topic'] == null) {
      throw new runtime.RequiredError(
        'topic',
        'Required parameter "topic" was null or undefined when calling publicTopicTopicV1Get().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/topic/{topic}/v1`.replace(
          `{${'topic'}}`,
          encodeURIComponent(String(requestParameters['topic']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Get summary information for a social topic. The output is a 24 hour aggregation social activity with metrics comparing the latest 24 hours to the previous 24 hours.
   */
  async publicTopicTopicV1Get(
    requestParameters: PublicTopicTopicV1GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publicTopicTopicV1GetRaw(requestParameters, initOverrides)
  }

  /**
   * Get a list of trending social topics.
   */
  async publicTopicsListV1GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PublicTopicsListV1Get200Response>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/public/topics/list/v1`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicTopicsListV1Get200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Get a list of trending social topics.
   */
  async publicTopicsListV1Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PublicTopicsListV1Get200Response> {
    const response = await this.publicTopicsListV1GetRaw(initOverrides)
    return await response.value()
  }
}
